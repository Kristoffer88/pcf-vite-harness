apiVersion: productascode.org/v0.1.0
kind: Ticket
metadata:
  id: ticket-001-dataset-getformattedvalue
  name: "Implement Dataset getFormattedValue Support"
  created_at: "2025-01-24"
  updated_at: "2025-01-24"
  owner: "kristoffer"
  assignee: "kristoffer"
  labels:
    - "pcf"
    - "dataset"
    - "api-enhancement"
    - "developer-experience"
spec:
  description: |
    Implement full `getFormattedValue` support for PCF dataset records in the pcf-vite-harness 
    development environment. Currently, dataset records created by datasetGenerator don't implement 
    the `getFormattedValue` method that PCF components expect, leading to fallback behavior and 
    potential inconsistencies.
    
    ## Technical Context
    - Dataset records generated by `datasetGenerator.ts` don't include the `getFormattedValue` method
    - Components must use workarounds (checking `_entityReference._name`) instead of standard PCF API
    - No access to formatted values for dates, numbers, currencies, option sets, etc.
    - PCF developers expect `getFormattedValue` to work as it does in production
    
    ## Business Value
    - Improves developer experience by matching production PCF behavior
    - Enables proper testing of formatted value display logic
    - Reduces debugging time when components don't display values correctly
    - Provides foundation for advanced field type support
  
  type: "feature"
  status: "todo"
  priority: "high"
  
  estimated_effort: "1 week"
  
  acceptance_criteria:
    - "PCF components can use `record.getFormattedValue()` without modifications"
    - "All field types return properly formatted values (text, date, number, currency, option sets, lookups)"
    - "Maintains 100% backward compatibility with existing `_entityReference._name` usage"
    - "Performance impact < 10ms for 1000 records"
    - "TypeScript intellisense support for getFormattedValue method"
    - "Comprehensive unit tests covering all field types"
    - "Integration tests with real Dataverse data"
  
  tasks:
    - description: "Implement ticket-003-context-capture-playwright for realistic dataset contexts"
      status: "pending"
      assignee: "kristoffer"
      type: "dependency"
    - description: "Create DatasetRecordWrapper class implementing PCF record interface"
      status: "pending"
      assignee: "kristoffer"
      type: "implementation"
    - description: "Implement getFormattedValue with basic field type support (text, numbers)"
      status: "pending"
      assignee: "kristoffer"
      type: "implementation"
    - description: "Add advanced field type formatting (dates, currencies, option sets)"
      status: "pending"
      assignee: "kristoffer"
      type: "implementation"
    - description: "Add getNamedReference support for lookup fields"
      status: "pending"
      assignee: "kristoffer"
      type: "implementation"
    - description: "Update datasetGenerator to use wrapper class"
      status: "pending"
      assignee: "kristoffer"
      type: "implementation"
    - description: "Create comprehensive unit tests for all field types"
      status: "pending"
      assignee: "kristoffer"
      type: "testing"
    - description: "Add integration tests with real Dataverse data from tests/integration"
      status: "pending"
      assignee: "kristoffer"
      type: "testing"
    - description: "Performance testing with large datasets (1000+ records)"
      status: "pending"
      assignee: "kristoffer"
      type: "testing"
    - description: "Update TypeScript definitions and ensure intellisense support"
      status: "pending"
      assignee: "kristoffer"
      type: "documentation"
  
  pull_request:
    branch: "feature/ticket-001-dataset-getformattedvalue"
    url: ""
    status: "pending"
  
  related_tickets:
    - "ticket-002-dataset-record-consistency"
    - "ticket-003-context-capture-playwright"
  
  technical_notes: |
    ## Implementation Strategy
    
    **DEPENDENCY**: This feature should be implemented AFTER ticket-003-context-capture-playwright 
    is complete, as the runtime context capture will provide the most accurate dataset structures 
    and formatted value patterns from production environments.
    
    ### Phase 1: Basic getFormattedValue Support
    - Wrap generated records in a class that implements `getFormattedValue`
    - Map OData formatted values (`@OData.Community.Display.V1.FormattedValue`) to the method
    - Handle primary name field specially using existing `_entityReference._name`
    
    ### Phase 2: Field Type Handling
    - Date/DateTime formatting based on user locale
    - Number formatting (decimals, thousands separators)
    - Currency formatting with symbols
    - Option set labels from metadata
    - Boolean Yes/No labels
    - Lookup field names from OData annotations
    
    ### Phase 3: Advanced Features
    - Multi-select option sets
    - Status reason formatting
    - Duration fields
    - Calculated/rollup field indicators
    
    ## Key Files to Modify
    - `src/utils/datasetRecordConverter.ts` (create new wrapper class)
    - `src/utils/datasetGenerator.ts` (integrate wrapper)
    - `src/types/dataset.ts` (update TypeScript interfaces)
    
    ## Data Sources for Formatting
    1. **Production Context Capture**: Use ticket-003-context-capture-playwright to extract 
       real formatted value patterns from production context.parameters[datasetkey]
    2. OData Formatted Values: `@OData.Community.Display.V1.FormattedValue`
    3. Lookup Names: `_${field}_value@OData.Community.Display.V1.FormattedValue`
    4. Metadata-based formatting for fields without OData annotations
    5. Fallback to raw values when formatted values unavailable
    
    The context capture technique will provide the most accurate understanding of how 
    real PCF dataset records structure their getFormattedValue responses.
    
    ## Backward Compatibility
    - Keep existing `_entityReference._name` for legacy code
    - Add deprecation warnings when old patterns detected
    - Gradual migration path documented
    
    ## Performance Considerations
    - Cache formatted values to avoid repeated calculations
    - Lazy load formatting for large datasets
    - Minimize metadata lookups
    - Memory usage monitoring for large record sets