apiVersion: productascode.org/v0.1.0
kind: Ticket
metadata:
  id: ticket-002-dataset-record-consistency
  name: "Fix Dataset Record Structure Consistency"
  created_at: "2025-01-24"
  updated_at: "2025-01-24"
  owner: "kristoffer"
  assignee: "kristoffer"
  labels:
    - "pcf"
    - "dataset"
    - "bug"
    - "consistency"
spec:
  description: |
    Fix inconsistency between two different paths for creating dataset records in the PCF Vite Harness.
    Currently, datasetGenerator.ts creates records with full PCF structure including `_entityReference._name`,
    but datasetEnhancer.ts creates simplified records without the `_entityReference` structure.
    
    This inconsistency causes issues where PCF components expecting the standard structure fail to 
    display proper names when records are injected via the dataset refresh functionality.
    
    ## Technical Context
    - `datasetGenerator.ts` creates records with correct PCF structure (working)
    - `datasetEnhancer.ts` creates simplified records missing `_entityReference` (broken)
    - Dataset refresh functionality uses enhancer's conversion, resulting in broken components
    - Components check `record._entityReference._name` but enhancer puts name in `record.name`
    
    ## Business Value
    - Consistent behavior across all dataset record creation paths
    - Components work without modification in all scenarios
    - Better PCF compatibility and predictable behavior
    - Reduces developer confusion and debugging time
  
  type: "bug"
  status: "todo"
  priority: "high"
  
  estimated_effort: "3-4 days"
  
  acceptance_criteria:
    - "Records from both datasetGenerator and datasetEnhancer have identical structure"
    - "Components display proper names without modification using either path"
    - "No regression in existing functionality"
    - "Consistent behavior across all entity types"
    - "Dataset refresh maintains proper record structure"
    - "Unit tests verify structural consistency"
    - "Integration tests cover both record creation paths"
  
  tasks:
    - description: "Analyze current record structures from both paths"
      status: "pending"
      assignee: "kristoffer"
      type: "investigation"
    - description: "Update convertEntityToRecord in datasetEnhancer.ts to match PCF structure"
      status: "pending"
      assignee: "kristoffer"
      type: "implementation"
    - description: "Add _entityReference structure with proper name mapping"
      status: "pending"
      assignee: "kristoffer"
      type: "implementation"
    - description: "Add _record structure with fields mapping"
      status: "pending"
      assignee: "kristoffer"
      type: "implementation"
    - description: "Include other PCF-specific properties for full compatibility"
      status: "pending"
      assignee: "kristoffer"
      type: "implementation"
    - description: "Create unit tests to verify record structure consistency"
      status: "pending"
      assignee: "kristoffer"
      type: "testing"
    - description: "Add integration tests covering both generation paths"
      status: "pending"
      assignee: "kristoffer"
      type: "testing"
    - description: "Test with various entity types to ensure universal compatibility"
      status: "pending"
      assignee: "kristoffer"
      type: "testing"
    - description: "Verify dataset refresh functionality maintains structure"
      status: "pending"
      assignee: "kristoffer"
      type: "testing"
  
  pull_request:
    branch: "feature/ticket-002-dataset-record-consistency"
    url: ""
    status: "pending"
  
  related_tickets:
    - "ticket-001-dataset-getformattedvalue"
  
  technical_notes: |
    ## Current State Analysis
    
    ### datasetGenerator.ts (Working Correctly)
    Creates records with this structure:
    ```javascript
    {
      _record: {
        initialized: 2,
        identifier: { etn: entityName, id: { guid: recordId } },
        fields: { /* field data */ }
      },
      _columnAliasNameMap: {},
      _primaryFieldName: primaryFieldName,
      _isDirty: false,
      _entityReference: {
        _etn: entityName,
        _id: recordId,
        _name: primaryNameValue  // ✅ This is what components expect
      }
    }
    ```
    
    ### datasetEnhancer.ts (Missing Structure)
    Creates records with this structure:
    ```javascript
    {
      [fieldName]: value,
      name: primaryNameValue,  // ❌ Not where components look for it
      // ... other fields
    }
    ```
    
    ## Implementation Strategy
    
    ### Update convertEntityToRecord in datasetEnhancer.ts
    ```typescript
    async function convertEntityToRecord(
      entity: ComponentFramework.WebApi.Entity,
      metadata: EntityMetadataInfo | null,
      webAPI?: ComponentFramework.WebApi
    ): Promise<any> {
      const recordId = getEntityPrimaryKey(entity, metadata);
      const primaryName = getEntityPrimaryName(entity, metadata);
      
      const record = {
        _record: {
          initialized: 2,
          identifier: {
            etn: metadata?.LogicalName || '',
            id: { guid: recordId }
          },
          fields: {} // Process fields here
        },
        _columnAliasNameMap: {},
        _primaryFieldName: metadata?.PrimaryNameAttribute || 'name',
        _isDirty: false,
        _entityReference: {
          _etn: metadata?.LogicalName || '',
          _id: recordId,
          _name: primaryName
        }
      };
      
      // Process fields into _record.fields with proper structure
      // Maintain backward compatibility
      
      return record;
    }
    ```
    
    ## Key Files to Modify
    - `src/utils/datasetEnhancer.ts` (main implementation)
    - Tests that verify record structure consistency
    - Integration tests for dataset refresh functionality
    
    ## Backward Compatibility
    - Changes are internal to record creation
    - Existing component code continues to work
    - Minimal performance impact (slightly larger objects)
    - No breaking changes to public APIs
    
    ## Testing Strategy
    1. **Unit Tests**: Verify record structure matches PCF expectations
    2. **Integration Tests**: Test with real Dataverse data
    3. **Component Tests**: Ensure existing components work without changes
    4. **Regression Tests**: Verify no functionality breaks
    
    ## Success Criteria Validation
    - Use structural comparison tests between generator and enhancer outputs
    - Component integration tests with both record types
    - Performance benchmarks to ensure minimal impact
    - Cross-entity-type testing for universal compatibility